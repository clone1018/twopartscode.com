<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Two Parts Code</title><link>https://twopartscode.com/</link><description>Recent content on Two Parts Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Oct 2020 11:37:29 -0400</lastBuildDate><atom:link href="https://twopartscode.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Waffle</title><link>https://twopartscode.com/elixir/waffle/introduction-to-waffle/</link><pubDate>Fri, 30 Oct 2020 11:37:29 -0400</pubDate><guid>https://twopartscode.com/elixir/waffle/introduction-to-waffle/</guid><description>Ingredients Elixir 1.11.1 PostgreSQL 13 Waffle 1.1.3 Waffle Ecto x.x.x Welcome to the first ever blog series on Two Parts Code! Our first highlight will be a library for Elixir called Waffle. It&amp;rsquo;s a simple neat library that is essential for handling user uploads.
Article Plan Basically, for expanded content available on the site I want to have multiple posts attached to a single concept, this way we can drive SEO for specific questions, and the content will be easier to reference.</description></item><item><title>Advanced Usage</title><link>https://twopartscode.com/elixir/waffle/advanced-usage/</link><pubDate>Fri, 30 Oct 2020 11:37:29 -0400</pubDate><guid>https://twopartscode.com/elixir/waffle/advanced-usage/</guid><description>Ingredients Elixir 1.11.1 PostgreSQL 13.0 Phoenix 1.5.6 Waffle 1.1.3 Waffle Ecto 0.0.9</description></item><item><title>My First Post</title><link>https://twopartscode.com/post/my-first-post/</link><pubDate>Fri, 30 Oct 2020 11:37:29 -0400</pubDate><guid>https://twopartscode.com/post/my-first-post/</guid><description>This is an example post.</description></item><item><title>Waffle with Phoenix Controllers</title><link>https://twopartscode.com/elixir/waffle/with-phoenix-controllers/</link><pubDate>Fri, 30 Oct 2020 11:37:29 -0400</pubDate><guid>https://twopartscode.com/elixir/waffle/with-phoenix-controllers/</guid><description>Ingredients Elixir 1.11.1 PostgreSQL 13.0 Phoenix 1.5.6 Waffle 1.1.3 Waffle Ecto 0.0.9 In this tutorial we&amp;rsquo;ll be showing you how to use Waffle and Waffle Ecto directly inside a traditional Phoenix Controller based application, our next guide covers how to use it more magically with Phoenix LiveView. Our example project will be a simple file upload tool users can use to store plain text files and images. If you are interested in using Waffle without Waffle Ecto, you&amp;rsquo;ll just need to omit the imports and handle the state saving yourself.</description></item><item><title>Waffle with Phoenix Live View</title><link>https://twopartscode.com/elixir/waffle/with-phoenix-live-view/</link><pubDate>Fri, 30 Oct 2020 11:37:29 -0400</pubDate><guid>https://twopartscode.com/elixir/waffle/with-phoenix-live-view/</guid><description>Ingredients Elixir 1.11.1 PostgreSQL 13.0 Phoenix 1.5.6 Waffle 1.1.3 Waffle Ecto 0.0.9</description></item></channel></rss>